// @ts-check

/**
 * Implement the classes etc. that are needed to solve the
 * exercise in this file. Do not forget to export the entities
 * you defined so they are available for the tests.
 */

// task 1: define size for storing the dimensions of the window
// prototype syntax...
export function Size(width=80, height=60) {
    this.width = width;
    this.height = height;
  }
  
  Size.prototype.resize = function(newWidth, newHeight) {
    this.width = newWidth;
    this.height = newHeight;
  }
  
  // task 1: define size for storing the dimensions of the window
  // class syntax...
  // export class Size {
  //   constructor (width=80, height=60) {
  //     this.width = width;
  //     this.height = height;
  //   }
  
  //   resize(newWidth, newHeight) {
  //     this.width = newWidth;
  //     this.height = newHeight;
  //   }
  // }
  
  
  
  // task 2: define position to store a window position
  // prototype syntax...
  export function Position(x=0, y=0){
    this.x = x;
    this.y = y;
  }
  
  Position.prototype.move = function(newX, newY) {
    this.x = newX;
    this.y = newY;
  };
  
  // task 2: define position to store a window position
  // class syntax...
  // export class Position {
  //   constructor(x=0, y=0) {
  //     this.x = x;
  //     this.y = y;
  //   }
  //   move(newX, newY) {
  //     this.x = newX;
  //     this.y = newY;
  //   }
  // }



// task 3: define a ProgramWindow class
// class syntax...
export class ProgramWindow {
    screenSize;
    size;
    position;
    
    constructor () {
      this.screenSize = new Size(800, 600);
      this.size = new Size();
      this.position = new Position();
    }
    // task 4: add a method to resize the window
    // class syntax...
    resize(newSize) {
        const maxWidth = this.screenSize.width - this.position.x;
        const maxHeight = this.screenSize.height - this.position.y;
        const finalWidth = Math.max(1, Math.min(newSize.width, maxWidth));
        const finalHeight = Math.max(1, Math.min(newSize.height, maxHeight));
        this.size.resize(finalWidth, finalHeight);
      }
}
